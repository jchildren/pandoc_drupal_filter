<?php
/**
 * @file
 * Module file for pandoc_filter.
 */

function pandoc_filter_config_load() {
  if (!class_exists('Pandoc', true)) {
    if (module_exists('composer_manager')
    && function_exists('composer_manager_register_autoloader')) {
      composer_manager_register_autoloader();
    }
    elseif (file_exists(__DIR__ . '/vendor/autoload.php')) {
      require_once __DIR__ . '/vendor/autoload.php';
    }
    else {
      drupal_set_message('Could not find the Pandoc Class.
      Please use composer to grab the Pandoc-PHP library
      or use composer_manager to help you.', 'error');
      return FALSE;
    }
  }
  return TRUE;
}


/**
 * @defgroup pandoc_filter Pandoc Filter
 * @{
 * Pandoc filter for drupal.
*/


/**
 * Implements hook_menu().
 */
function pandoc_filter_menu() {
  $items['admin/config/content'] = array(
    'title' => 'Pandoc Filter',
    'page callback' => '_pandoc_filter_information',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_help().
 */
function pandoc_filter_help($path, $arg) {
  switch ($path) {
    case 'admin/help#pandoc_filter':
      return _pandoc_filter_information();
  }
}

/**
 * Simply returns a little bit of information about the example.
 */
function _pandoc_filter_information() {
  return t("<p>The Pandoc drupal filter replaces supported markup formats to html
    to be displayed in content pages</p>",
    array('!link' => l(t('admin/config/content/formats'), 'admin/config/content/formats'))
  );
}

/**
 * Implements hook_filter_info().
 *
 */
function pandoc_filter_filter_info() {
  $filters['pandoc_filter'] = array(
    'title' => t('Pandoc Filter'),
    'description' => t('Replaces a specified markup with html'),
    'process callback'  => '_pandoc_filter_filter_process',
    'default settings' => array(
      'input_format_setting' => 'mediawiki',
      'base_header_level'    => '2',
      'columns'              => '72',
      'toc_depth'            => '3',
      'highlight_style'      => 'pygments',
      'css'                  => NULL,
    ),
    'settings callback' => '_pandoc_filter_filter_settings',
    'tips callback' => '_pandoc_filter_filter_tips',
  );
  return $filters;
}


/**
 * Settings callback for Pandoc filter.
 *
 */
function _pandoc_filter_filter_settings($form, $form_state, $filter, $format, $defaults) {
  $settings['input_format'] = array(
    '#type' => 'select',
    '#title' => t('Markup type'),
    '#default_value' => isset($filter->settings['input_format'])
    ? $filter->settings['input_format'] : $defaults['pandoc_filter'],
    '#description' => t('The markup type to be used in the filter'),
    '#options' => array(
      'native'            => t('Native Haskell'),
      'json'              => t('JSON native AST'),
      'markdown'          => t('Pandoc Markdown'),
      'markdown_strict'   => t('Strict Pandoc Markdown'),
      'markdown_phpextra' => t('Php Markdown'),
      'markdown_github'   => t('Github extended Markdown'),
      'markdown_mmd'      => t('MultiMarkdown'),
      'rst'               => t('reStructuredText'),
      'mediawiki'         => t('MediaWiki'),
      'docbook'           => t('DocBook'),
      'textile'           => t('Textile'),
      'latex'             => t('LaTeX'),
    ),
  );



  $settings['pandoc_extras'] = array(
    '#title' => t('Pandoc additional options'),
    '#type' => 'checkboxes',
    '#description' => t('See http://pandoc.org/README.html for more details'),
    '#options' => array(
      'use_html5'         = 'Use html5 tags in output';
      'use_pass_raw'      = 'Parse untranslatable HTML codes and LaTeX enviroments as raw';
      'use_smart'         = 'Automatically produce typographically correct output';
      'use_preserve_tabs' = 'Preserve tabs in formatting for code blocks';
      'use_normalize'     = 'Normalize document after processing';
      'use_toc'           = 'Include a table of contents at the top of the page';
      'use_no_highlight'  = 'Disables code highlighting';
      'use_section_divs'  = 'Wrap sections in <div> tags (or <section> with html5 enabled)';
    ),
    '#default_value' => array(
      'use_smart',
      'use_normalize',
    ),
    '#value_callback' => 'settings_pandoc_extras_options_value'
  );

  $settings['base_header_level'] = array(
    '#type' => 'select',
    '#title' => t('Base header level'),
    '#default_value' => isset($filter->settings['toc_depth'])
    '#description' => t('The header tag to use for the top level titles'),
    ? $filter->settings['toc_depth'] : $defaults['pandoc_filter'],
    '#options' => array(
      '1' => t('1'),
      '2' => t('2'),
      '3' => t('3'),
      '4' => t('4'),
      '5' => t('5'),
      '6' => t('6'),
    ),

  $settings['columns'] = array(
    '#type' => 'textbox',
    '#title' => t('Column width'),
    '#default_value' => isset($filter->settings['columns'])
    ? $filter->settings['columns'] : $defaults['pandoc_filter'],
    '#description' => t('A positive integer that determines the number of characters per line on output'),
    '#element_validate' => array('element_validate_integer_positive'),
  );

  $settings['toc_depth'] = array(
    '#type' => 'select',
    '#title' => t('Table of contents depth'),
    '#default_value' => isset($filter->settings['toc_depth'])
    ? $filter->settings['toc_depth'] : $defaults['pandoc_filter'],
    '#description' => t('The number of header levels below the base to include in the table of contents'),
    '#options' => array(
      '1' => t('1'),
      '2' => t('2'),
      '3' => t('3'),
      '4' => t('4'),
      '5' => t('5'),
      '6' => t('6'),
    ),
  );

  $settings['highlight_style'] = array(
    '#type' => 'select',
    '#title' => t('Code highlight style'),
    '#default_value' => isset($filter->settings['highlight_style'])
    ? $filter->settings['highlight_style'] : $defaults['pandoc_filter'],
    '#description' => t('The highlight style to be used in fenced code blocks'),
    '#options' => array(
      'pygments'   => t('pygments'),
      'kate'       => t('kate'),
      'monochrome' => t('monochrome'),
      'espresso'   => t('expresso'),
      'zenburn'    => t('zenburn'),
      'haddock'    => t('haddock'),
      'tango'      => t('tango'),
    ),
  );

  return $settings;
}

function settings_pandoc_extras_value($element, $input = FALSE) {
  if ($input === FALSE) {
    return isset($element['#default_value']) ? $element['#default_value'] : 0;
  }
  else {
    return isset($input) ? $element['#return_value'] : 0;
  }
}

/**
 * Pandoc filter process callback.
 *
 */
function _pandoc_filter_filter_process($text, $filter, $format) {

  $loaded = pandoc_filter_config_load();
  if(!$loaded){
    return $text;
  }

  // Creates a new Pandoc object from pandoc-php
  $pandoc = New Pandoc\Pandoc();

  // This array will store key value pairs that will be passed to the
  // runWith pandoc-php function and match options for Pandoc
  $options = array();

  $input_format = isset($filter->settings['input_format_setting'])
  ? $filter->settings['input_format_setting'] : 'mediawiki';

  $options['from']  = $input_format;

  if(settings_pandoc_binary_options_value('use_html5') == TRUE) {
    $options['to'] = 'html5';
  }
  else {
    $options['to'] = 'html';
  }

  if(settings_pandoc_binary_options_value('parse_raw')         == TRUE)
    $options['parse-raw']     = NULL;
  if(settings_pandoc_binary_options_value('use_smart')         == TRUE)
    $options['smart']         = NULL;
  if(settings_pandoc_binary_options_value('use_normalize')     == TRUE)
    $options['normalize']     = NULL;
  if(settings_pandoc_binary_options_value('use_preserve_tabs') == TRUE)
    $options['preserve-tabs'] = NULL;
  if(settings_pandoc_binary_options_value('use_toc')           == TRUE)
    $options['toc']           = NULL;
  if(settings_pandoc_binary_options_value('use_no_highlight')  == TRUE)
    $options['no-highlight']  = NULL;
  if(settings_pandoc_binary_options_value('use_section_divs')  == TRUE)
    $options['section-divs']  = NULL;

  $options['base-header-level'] = $header_level;
  $options['columns']           = $column_width;
  $options['toc-depth']         = $toc_depth;
  $options['highlight-style']   = $hl_style;

  $text = $pandoc->runWith($text, $options);
  return $text;
}


/**
 * Filter tips callback for Pandoc filter.
 *
 */
function _pandoc_filter_filter_tips($filter, $format, $long = FALSE) {
  $replacement = isset($filter->settings['input_format_settings'])
  ? $filter->settings['input_format_setting'] : 'mediawiki';
  if (!$long) {
    // This string will be shown in the content add/edit form.
    return t('Content in the %replacement format will be converted to html.', array('%replacement' => $replacement));
  }
  else {
    return t('Content in the %replacement format will be converted to html through the pandoc program.',
    array('%replacement' => $replacement));
  }
}

/**
 * @} End of "defgroup pandoc_filter".
 */
