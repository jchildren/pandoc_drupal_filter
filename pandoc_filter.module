<?php
/**
 * @file
 * Module file for pandoc_filter.
 */

function pandoc_filter_config_load() {
  if (!class_exists('Pandoc', true)) {
    if (module_exists('composer_manager') && function_exists('composer_manager_register_autoloader')) {
      composer_manager_register_autoloader();
    }
    elseif (file_exists(__DIR__ . '/vendor/autoload.php')) {
      require_once __DIR__ . '/vendor/autoload.php';
    }
    else {
      drupal_set_message('Could not find the Pandoc Class. Please use composer to grab the Pandoc-PHP library or use composer_manager to help you.', 'error');
      return FALSE;
    }
  }
  return TRUE;
}


/**
 * @defgroup pandoc_filter Pandoc Filter 
 * @{
 * Pandoc filter for drupal.
*/


/**
 * Implements hook_menu().
 */
function pandoc_filter_menu() {
  $items['admin/config/content'] = array(
    'title' => 'Pandoc Filter',
    'page callback' => '_pandoc_filter_information',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_help().
 */
function pandoc_filter_help($path, $arg) {
  switch ($path) {
    case 'admin/help#pandoc_filter':
      return _pandoc_filter_information();
  }
}

/**
 * Simply returns a little bit of information about the example.
 */
function _pandoc_filter_information() {
  return t("<p>The Pandoc drupal filter replaces supported markup formats to html
    to be displayed in content pages</p>",
    array('!link' => l(t('admin/config/content/formats'), 'admin/config/content/formats'))
  );
}

/**
 * Implements hook_filter_info().
 *
 */
function pandoc_filter_filter_info() {
  $filters['pandoc_filter'] = array(
    'title' => t('Pandoc Filter'),
    'description' => t('Replaces a specified markup with html'),
    'process callback'  => '_pandoc_filter_filter_process',
    'default settings' => array(
      'pandoc_filter_settings' => 'mediawiki',
    ),
    'settings callback' => '_pandoc_filter_filter_settings',
    'tips callback' => '_pandoc_filter_filter_tips',
  );
  return $filters;
}


/**
 * Settings callback for Pandoc filter.
 *
 */
function _pandoc_filter_filter_settings($form, $form_state, $filter, $format, $defaults) {
  $settings['input_format_setting'] = array(
    '#type' => 'select',
    '#title' => t('Markup type'),
    '#default_value' => isset($filter->settings['input_format_setting']) 
    ? $filter->settings['input_format_setting'] : $defaults['input_format_setting'],
    '#description' => t('The markup type to be used in the filter'),
    '#options' => array(
      'mediawiki' => t('MediaWiki'),
      'latex' => t('LaTeX'), 
      'markdown' => t('Pandoc Markdown'),
    ),
  );
  
  return $settings;
}

/**
 * Pandoc filter process callback.
 *
 */
function _pandoc_filter_filter_process($text, $filter, $format) {
  
  $loaded = pandoc_filter_config_load();
  if(!$loaded){
    return $text;
  }
  
  $input_format = isset($filter->settings['input_format_setting']) 
  ? $filter->settings['input_format_setting'] : 'mediawiki';
  
  $pandoc = New Pandoc\Pandoc();
  $options = array();
    
  $options['from']  = $input_format;
  
  if($use_html5 == TRUE) {
    $options['to'] = "html5";
  }
  else {
    $options['to'] = "html";
  }
  
  if($use_pass_raw      == TRUE) $options['parse-raw']     = NULL;
  if($use_smart         == TRUE) $options['smart']         = NULL;
  if($use_normalize     == TRUE) $options['normalize']     = NULL;
  if($use_preserve_tabs == TRUE) $options['preserve-tabs'] = NULL;
  if($use_toc           == TRUE) $options['toc']           = NULL;
  if($use_no_highlight  == TRUE) $options['no-highlight']  = NULL;
  if($use_section_divs  == TRUE) $options['section-divs']  = NULL;
  
  $options['base-header-level'] = $header_level;
  $options['columns']           = $column_width;
  $options['toc-depth']         = $toc_depth;
  $options['highlight-style']   = $hl_style;
  $options['css']               = $css_url;
    
  $text = $pandoc->runWith($text, $options);
  return $text;
}


/**
 * Filter tips callback for Pandoc filter.
 *
 */
function _pandoc_filter_filter_tips($filter, $format, $long = FALSE) {
  $replacement = isset($filter->settings['input_format_settings']) 
  ? $filter->settings['input_format_setting'] : 'mediawiki';
  if (!$long) {
    // This string will be shown in the content add/edit form.
    return t('Content in the %replacement format will be converted to html.', array('%replacement' => $replacement));
  }
  else {
    return t('Content in the %replacement format will be converted to html through the pandoc program.',
    array('%replacement' => $replacement));
  }
}

/**
 * @} End of "defgroup pandoc_filter".
 */
